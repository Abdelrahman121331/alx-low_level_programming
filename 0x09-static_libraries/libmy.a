!<arch>
_putchar.c/     0           0     0     644     248       `
#include <unistd.h>
 
/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
 return (write(1, &c, 1));
}
0-isupper.o/    0           0     0     644     227       `
#include "main.h"
/**
 * _isupper - uppercase letters
 * @c: char to check
 *
 * Return: 0 or 1
 */
int _isupper(int c)
{
        	if (c >= 'A' && c <= 'Z')
                    	return (1);
        	else
        	return (0);
}

0-memset.o/     0           0     0     644     371       `

#include "main.h"

/**
* _memset - Program fills a block of memory with a specific value
* @s: starting address of memory to be filled
* @b: the desired value
* @n: number of bytes to be changed
*
* Return: change array with new value for n bytes
*/

char *_memset(char *s, char b, unsigned int n)

{

int a = 0;

for (; n > 0; a++)

{

s[a] = b;

n--;

}
return (s);
}

0-strcat.o/     0           0     0     644     351       `
#include "main.h"


/**
*  _strcat - function that concatenates two strings
*  @dest: entered value
*  @src: entered value
*
*  Return: void
*/


char *_strcat(char *dest, char *src)


{

int a;

int b;

a = 0;

while (dest[a] != '\0')

{

a++;

}

b = 0;

while (src[b] != '\0')

{

dest[a] = src[b];

a++;

b++;
}

dest[a] = '\0';

return (dest);
}

100-atoi.o/     0           0     0     644     913       `
#include "holberton.h"
#include <limits.h>

/**
 * _atoi - Convert a string to an integer
 * @s: Pointer to the string to convert
 *
 * Return: The integer that was converted
 */
int _atoi(char *s)
{
	int i, start, negative;
	unsigned int number;

	start = -1;
	negative = 0;
	number = 0;
	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] >= '0' && s[i] <= '9')
			start = i;

		if (s[i] == '-' && start == -1)
		{
			if (negative)
				negative = 0;
			else
				negative = 1;
		}
	}

	if (start != -1)
	{
		for (i = 0; s[i] != '\0'; i++)
		{
			if (s[i] >= '0' && s[i] <= '9')
				number = number * 10 + s[i] - '0';
			else if (s[i - 1] >= '0' && s[i - 1] <= '9')
				break;
		}
	}

	if ((number >= (unsigned int) INT_MAX && negative == 0))
		return (INT_MAX);
	else if ((number > (unsigned int) INT_MAX && negative))
		return (INT_MIN);
	else if (negative)
		return ((int) -number);
	else
		return ((int) number);
}

1-isdigit.o/    0           0     0     644     226       `
#include "main.h"
                    	
/**
 * _isdigit - checks for a digit (0 through 9)
 * @c: int to be checked
 * Return: 1 if c is a digit, 0 otherwise
 */
int _isdigit(int c)
{
        	return (c >= '0' && c <= '9');
}
1-memcpy.o/     0           0     0     644     346       `
#include "main.h"
/**
 *_memcpy - a function that copies memory area
 *@dest: memory where is stored
 *@src: memory where is copied
 *@n: number of bytes
 *
 *Return: copied memory with n byted changed
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
int r = 0;
int i = n;
for (; r < i; r++)
{
dest[r] = src[r];
n--;
}
return (dest);
}
1-strncat.o/    0           0     0     644     411       `

#include "main.h"

/**
* _strncat - function concatenate two strings
* using at most n bytes from src
* @dest: entered value
* @src: entered value
* @n: entered value
*
* Return: dest
*/

char *_strncat(char *dest, char *src, int n)

{

int a;

int b;

a = 0;

while (dest[a] != '\0')

{

a++;

}

b = 0;

while (b < n && src[b] != '\0')

{

dest[a] = src[b];

a++;

b++;

}

dest[a] = '\0';
return (dest);

}

2-strchr.o/     0           0     0     644     222       `
#include "main.h"
/**
* _strchr - Entry point
* @s: input
* @c: input
* Return: Always 0 (Success)
*/
char *_strchr(char *s, char c)
{
int i = 0; 
for (; s[i] >= '\0'; i++)
{
if (s[i] == c)
return (&s[i]);
}
return (0);
}
2-strlen.o/     0           0     0     644     223       `
#include "holberton.h"

/**
 * _strlen - This function is equal to strlen
 *
 * @s: this is my entry
 *
 * Return: the las character
 */
int _strlen(char *s)
{
	int a;

	for (a = 0; s[a] != '\0' ; a++)
	{
	}
	return (a);
}

2-strncpy.o/    0           0     0     644     354       `
#include "holberton.h"
/**
 * _strncpy - This is my main
 * @dest: This is my dest
 * @src: This is my source
 * @n: This is my N
 *
 *Return: THis is my return
 */

char *_strncpy(char *dest, char *src, int n)
{
	int b;

	for (b = 0; b < n && src[b] != '\0' ; b++)
	{
	dest[b] = src[b];
	}
	for (; b  < n; b++)
	{
		dest[b] = '\0';
	}
	return (dest);
}
3-islower.o/    0           0     0     644     225       `
#include "holberton.h"

/**
 * _islower - Check if the entry is in lower.
 * @c: This is the entry
 *
 * Return: Always 0.
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

3-puts.o/       0           0     0     644     206       `
#include "holberton.h"

/**
 * _puts - Escribir un texto
 *
 * @str: This is my entry
 *
 */

void _puts(char *str)
{
	int a;

	for (a = 0; str[a] != '\0'; a++)
	{
		_putchar(str[a]);
	}
	_putchar('\n');
}
3-strcmp.o/     0           0     0     644     327       `
#include "holberton.h"
/**
 * _strcmp - This is my function
 * @s1: This is my entry
 * @s2: This is my entry again
 * Return: This is my result
 */

int _strcmp(char *s1, char *s2)
{
	for (; (*s1 != '\0' && *s2 != '\0') && *s1 == *s2; s1++, s2++)
	{
	}
	if (*s1 == *s2)
	{
		return (0);
	}
	else
	{
		return (*s1 - *s2);
	}
}

3-strspn.o/     0           0     0     644     456       `
#include "holberton.h"
/**
 * _strspn - This is my function
 * @s: This is the string literal
 * @accept: This is the second string
 *
 * Return: This is the equal string to S
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int a, b, c;

	c = 0;
	for (a = 0; s[a] != '\0'; a++)
	{
		for (b = 0; accept[b] != '\0'; b++)
		{
			if (accept[b] == s[a])
			{
				c++;
				break;
			}
		}
		if (accept[b] != s[a])
		{
		break;
		}
	}
	return (c);
}
4-isalpha.o/    0           0     0     644     275       `
#include "holberton.h"

/**
 * _isalpha - check the the entry to deteminate if is lower or upper
 *
 * @c: This is the entry
 * Return: Always 0.
 */

int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}
	else
	{
	return (0);
	}
}

4-strpbrk.o/    0           0     0     644     394       `
#include "holberton.h"
#include <stddef.h>

/**
 * _strpbrk - This is my function
 * @s: This is my entry
 * @accept: This is my second entry
 * Return: This is my return
 */
char *_strpbrk(char *s, char *accept)
{
	unsigned int a, b;

	for (a = 0; s[a] != '\0'; a++)
	{
		for (b = 0; accept[b] != '\0'; b++)
		{
			if (accept[b] == s[a])
			{
				return (&s[a]);
			}
		}
	}
	return (NULL);
}
5-strstr.o/     0           0     0     644     586       `
#include "holberton.h"
#include <stdio.h>

/**
 * _strstr - locates a substring inside a string
 *
 * @haystack: string to search
 * @needle: substring to search for
 * Return: returns pointer to location of substring inside haystack or NULL
 */

char *_strstr(char *haystack, char *needle)
{
	int i;

	i = 0;
	while (haystack[i] != '\0')
	{
		int j, start;

		start = i;
		j = 0;
		while (haystack[i] == needle[j] &&
		       needle[j] != '\0' && haystack[i] != '\0')
		{
			i++;
			j++;
		}
		if (needle[j] == '\0')
			return (haystack + start);
		i = start + 1;
	}
	return (NULL);
}
6-abs.o/        0           0     0     644     249       `
#include "holberton.h"

/**
 * _abs - This is a absolute value
 *
 * @a: This is the entry
 *
 * Return: Always 0.
 */

int _abs(int a)
{
	if (a > 0)
	{
		return (a);
	}
	else if (a < 0)
	{
		a = a * -1;
		return (a);
	}
	else
	{
		return (a);
	}
}

9-strcpy.o/     0           0     0     644     330       `
#include "holberton.h"

/**
 * _strcpy - Copiar el contenido de uno a otra variable
 * @dest: This is destiny
 * @src: This is the copia
 *
 * Return: This return copy
 */
char *_strcpy(char *dest, char *src)
{
	char *start = dest;

	while (*src != '\0')
	{
		*dest = *src;
		dest++;
		src++;
	}
	*dest = '\0';
	return (start);
}
